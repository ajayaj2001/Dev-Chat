[{"D:\\website project\\fun chart\\src\\index.js":"1","D:\\website project\\fun chart\\src\\component\\spinner\\Spinner.js":"2","D:\\website project\\fun chart\\src\\component\\app\\App.js":"3","D:\\website project\\fun chart\\src\\component\\Auth\\Register.js":"4","D:\\website project\\fun chart\\src\\component\\Auth\\Login.js":"5","D:\\website project\\fun chart\\src\\action\\index.js":"6","D:\\website project\\fun chart\\src\\reducers\\index.js":"7","D:\\website project\\fun chart\\src\\firebase.js":"8","D:\\website project\\fun chart\\src\\component\\colorPanel\\ColorPanel.js":"9","D:\\website project\\fun chart\\src\\component\\message\\Message.js":"10","D:\\website project\\fun chart\\src\\component\\sidepanel\\SidePanel.js":"11","D:\\website project\\fun chart\\src\\component\\metaPanel\\MetaPanel.js":"12","D:\\website project\\fun chart\\src\\action\\types.js":"13","D:\\website project\\fun chart\\src\\component\\sidepanel\\Channels.js":"14","D:\\website project\\fun chart\\src\\component\\sidepanel\\UserPanel.js":"15","D:\\website project\\fun chart\\src\\component\\message\\MessagesHeader.js":"16","D:\\website project\\fun chart\\src\\component\\message\\MessageForm.js":"17","D:\\website project\\fun chart\\src\\component\\message\\MessageChat.js":"18","D:\\website project\\fun chart\\src\\component\\message\\FileModal.js":"19","D:\\website project\\fun chart\\src\\component\\message\\ProgressBar.js":"20","D:\\website project\\fun chart\\src\\component\\sidepanel\\DirectMessages.js":"21","D:\\website project\\fun chart\\src\\component\\sidepanel\\Starred.js":"22","D:\\website project\\fun chart\\src\\component\\message\\Typing.js":"23","D:\\website project\\fun chart\\src\\component\\message\\Skeletion.js":"24","D:\\website project\\fun chart\\src\\component\\message\\DisplayTypingUsers.js":"25","D:\\website project\\fun chart\\src\\component\\sidepanel\\ChannelItemList.js":"26","D:\\website project\\Fire Chat\\src\\index.js":"27","D:\\website project\\Fire Chat\\src\\component\\app\\App.js":"28","D:\\website project\\Fire Chat\\src\\component\\Auth\\login\\Login.js":"29","D:\\website project\\Fire Chat\\src\\component\\spinner\\Spinner.js":"30","D:\\website project\\Fire Chat\\src\\component\\Auth\\register\\Register.js":"31","D:\\website project\\Fire Chat\\src\\action\\index.js":"32","D:\\website project\\Fire Chat\\src\\reducers\\index.js":"33","D:\\website project\\Fire Chat\\src\\component\\metaPanel\\MetaPanel.js":"34","D:\\website project\\Fire Chat\\src\\component\\Auth\\login\\loginForm\\LoginForm.js":"35","D:\\website project\\Fire Chat\\src\\component\\Auth\\register\\registerForm\\RegisterForm.js":"36","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\sidePanel\\SidePanel.js":"37","D:\\website project\\Fire Chat\\src\\action\\types.js":"38","D:\\website project\\Fire Chat\\src\\firebase.js":"39","D:\\website project\\Fire Chat\\src\\component\\message\\DisplayTypingUsers.js":"40","D:\\website project\\Fire Chat\\src\\component\\message\\messageForm\\MessageForm.js":"41","D:\\website project\\Fire Chat\\src\\component\\message\\messageHeader\\MessagesHeader.js":"42","D:\\website project\\Fire Chat\\src\\component\\message\\messageChat\\MessageChat.js":"43","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\userPanel\\UserPanel.js":"44","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\starred\\Starred.js":"45","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\channels\\Channels.js":"46","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\directMessage\\DirectMessages.js":"47","D:\\website project\\Fire Chat\\src\\component\\colorPanel\\ColorPanel.js":"48","D:\\website project\\Fire Chat\\src\\component\\message\\Typing.js":"49","D:\\website project\\Fire Chat\\src\\component\\message\\ProgressBar.js":"50","D:\\website project\\Fire Chat\\src\\component\\message\\FileModal.js":"51","D:\\website project\\Fire Chat\\src\\component\\sidepanel\\channels\\channelItem\\ChannelItemList.js":"52","D:\\website project\\Fire Chat\\src\\component\\message\\message\\Message.js":"53","D:\\website project\\Fire Chat\\src\\component\\message\\InitialMessage\\InitialMessage.js":"54"},{"size":1896,"mtime":1608795676585,"results":"55","hashOfConfig":"56"},{"size":265,"mtime":1608871042677,"results":"57","hashOfConfig":"56"},{"size":2207,"mtime":1609306093853,"results":"58","hashOfConfig":"56"},{"size":4265,"mtime":1608714864790,"results":"59","hashOfConfig":"56"},{"size":2437,"mtime":1609302755213,"results":"60","hashOfConfig":"56"},{"size":1121,"mtime":1609136295204,"results":"61","hashOfConfig":"56"},{"size":2002,"mtime":1609137285278,"results":"62","hashOfConfig":"56"},{"size":630,"mtime":1608818379746,"results":"63","hashOfConfig":"56"},{"size":4618,"mtime":1609227617556,"results":"64","hashOfConfig":"56"},{"size":8100,"mtime":1609259151835,"results":"65","hashOfConfig":"56"},{"size":881,"mtime":1609311253803,"results":"66","hashOfConfig":"56"},{"size":3618,"mtime":1609224343710,"results":"67","hashOfConfig":"56"},{"size":367,"mtime":1609136016115,"results":"68","hashOfConfig":"56"},{"size":5268,"mtime":1609313967091,"results":"69","hashOfConfig":"56"},{"size":7089,"mtime":1609264447622,"results":"70","hashOfConfig":"56"},{"size":1591,"mtime":1609078400934,"results":"71","hashOfConfig":"56"},{"size":8306,"mtime":1609224283011,"results":"72","hashOfConfig":"56"},{"size":1176,"mtime":1608873949288,"results":"73","hashOfConfig":"56"},{"size":2193,"mtime":1608830757069,"results":"74","hashOfConfig":"56"},{"size":420,"mtime":1608877017377,"results":"75","hashOfConfig":"56"},{"size":4114,"mtime":1609176798463,"results":"76","hashOfConfig":"56"},{"size":2698,"mtime":1609176969213,"results":"77","hashOfConfig":"56"},{"size":260,"mtime":1609157566934,"results":"78","hashOfConfig":"56"},{"size":322,"mtime":1609168941808,"results":"79","hashOfConfig":"56"},{"size":3253,"mtime":1609260294661,"results":"80","hashOfConfig":"56"},{"size":3921,"mtime":1609336511582,"results":"81","hashOfConfig":"56"},{"size":1896,"mtime":1609952915988,"results":"82","hashOfConfig":"83"},{"size":5098,"mtime":1609914952677,"results":"84","hashOfConfig":"83"},{"size":648,"mtime":1609831117426,"results":"85","hashOfConfig":"83"},{"size":265,"mtime":1608871042677,"results":"86","hashOfConfig":"83"},{"size":596,"mtime":1609522483044,"results":"87","hashOfConfig":"83"},{"size":1121,"mtime":1609136295204,"results":"88","hashOfConfig":"83"},{"size":2005,"mtime":1609827933683,"results":"89","hashOfConfig":"83"},{"size":3647,"mtime":1609952121965,"results":"90","hashOfConfig":"83"},{"size":2605,"mtime":1609952832334,"results":"91","hashOfConfig":"83"},{"size":5517,"mtime":1609953210814,"results":"92","hashOfConfig":"83"},{"size":1220,"mtime":1609954060606,"results":"93","hashOfConfig":"83"},{"size":367,"mtime":1609136016115,"results":"94","hashOfConfig":"83"},{"size":630,"mtime":1608818379746,"results":"95","hashOfConfig":"83"},{"size":2712,"mtime":1609953162146,"results":"96","hashOfConfig":"83"},{"size":8100,"mtime":1609953606157,"results":"97","hashOfConfig":"83"},{"size":1877,"mtime":1609951815312,"results":"98","hashOfConfig":"83"},{"size":1399,"mtime":1609951444139,"results":"99","hashOfConfig":"83"},{"size":6674,"mtime":1609953011582,"results":"100","hashOfConfig":"83"},{"size":2990,"mtime":1609952723355,"results":"101","hashOfConfig":"83"},{"size":5779,"mtime":1609952650889,"results":"102","hashOfConfig":"83"},{"size":4551,"mtime":1609952704459,"results":"103","hashOfConfig":"83"},{"size":5326,"mtime":1609953186919,"results":"104","hashOfConfig":"83"},{"size":260,"mtime":1609157566934,"results":"105","hashOfConfig":"83"},{"size":420,"mtime":1608877017377,"results":"106","hashOfConfig":"83"},{"size":1995,"mtime":1609953141924,"results":"107","hashOfConfig":"83"},{"size":2252,"mtime":1609954362404,"results":"108","hashOfConfig":"83"},{"size":8231,"mtime":1609954807964,"results":"109","hashOfConfig":"83"},{"size":199,"mtime":1609999656376,"results":"110","hashOfConfig":"83"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},"nhau1g",{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"113"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"113"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"113"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"113"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"113"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"113"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"113"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"1i1q1v8",{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\website project\\fun chart\\src\\index.js",[],["229","230"],"D:\\website project\\fun chart\\src\\component\\spinner\\Spinner.js",[],"D:\\website project\\fun chart\\src\\component\\app\\App.js",[],"D:\\website project\\fun chart\\src\\component\\Auth\\Register.js",[],"D:\\website project\\fun chart\\src\\component\\Auth\\Login.js",[],"D:\\website project\\fun chart\\src\\action\\index.js",[],"D:\\website project\\fun chart\\src\\reducers\\index.js",[],"D:\\website project\\fun chart\\src\\firebase.js",[],"D:\\website project\\fun chart\\src\\component\\colorPanel\\ColorPanel.js",[],"D:\\website project\\fun chart\\src\\component\\message\\Message.js",["231","232"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { Comment, Segment } from 'semantic-ui-react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setUserPosts } from '../../action'\r\n\r\nimport firebase from '../../firebase'\r\n\r\nimport MessageForm from './MessageForm'\r\nimport MessagesHeader from './MessagesHeader'\r\nimport MessageChat from './MessageChat'\r\n//import Skeletion from './Skeletion'\r\nimport Spinner from '../spinner/Spinner'\r\nimport DisplayTypingUsers from './DisplayTypingUsers'\r\n\r\nconst Message = (props) => {\r\n    const { currChannel, currUser, isPrivateChannel } = props;\r\n    const dispatch = useDispatch();\r\n    const messageEnd = useRef(null)\r\n    const [numUniqueUsers, setNumUniqueUsers] = useState(\"\")\r\n    const [messageRef] = useState(firebase.database().ref('messages'))\r\n    const [privateMessageRef] = useState(firebase.database().ref('privateMessages'))\r\n    const [userRef] = useState(firebase.database().ref('users'))\r\n    const [messages, setMessages] = useState([])\r\n    const [messageLoading, setMessageLoading] = useState(true)\r\n    const [searchTearm, setSearchTearm] = useState(\"\")\r\n    const [searchResult, setSearchResult] = useState([])\r\n    const [searchLoading, setSearchLoading] = useState(false)\r\n    const [isChannelStarred, setIsChannelStarred] = useState(false)\r\n    const [connectRef] = useState(firebase.database().ref('.info/connected'))\r\n    const [listeners, setListeners] = useState([])\r\n    useEffect(() => {\r\n        if (currUser && currChannel) {\r\n            removeListeners(listeners);\r\n            messageListener(currChannel.id);\r\n            addUserStarsListener(currChannel.id, currUser.uid)\r\n        }\r\n    }, [currUser, currChannel, listeners])\r\n\r\n    useEffect(() => {\r\n        if (messageEnd) {\r\n            messageEnd.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n    }, [messages])\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            removeListeners(listeners)\r\n            connectRef.off();\r\n        }\r\n\r\n    }, [])\r\n\r\n    const removeListeners = (listeners) => {\r\n        listeners.forEach(listener => {\r\n            listener.ref.child(listener.id).off(listener.event);\r\n        });\r\n\r\n    }\r\n    const addToListeners = (id, ref, event) => {\r\n        const index = listeners.findIndex(listener => {\r\n            return listener.id === id && listener.ref === ref && listener.event === event;\r\n        })\r\n\r\n        if (index === -1) {\r\n            const newListener = { id, ref, event }\r\n            setListeners([...listeners, newListener])\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addUserStarsListener = (channelId, userId) => {\r\n        userRef\r\n            .child(userId)\r\n            .child('starred')\r\n            .once('value')\r\n            .then(data => {\r\n                if (data.val() !== null) {\r\n                    const channelIds = Object.keys(data.val());\r\n                    const prevStarred = channelIds.includes(channelId);\r\n                    setIsChannelStarred(prevStarred)\r\n                }\r\n            })\r\n    }\r\n\r\n    const messageListener = (id) => {\r\n        let loadedMessages = [];\r\n        const ref = getMessageRef()\r\n        ref.child(id).on('child_added', snap => {\r\n            loadedMessages.push(snap.val());\r\n            setMessages([...loadedMessages])\r\n            setMessageLoading(false)\r\n            countUniqueUsers(loadedMessages);\r\n            countUserPosts(loadedMessages);\r\n        })\r\n        addToListeners(id, ref, 'child_added');\r\n\r\n    }\r\n\r\n    const handleStar = () => {\r\n        const updatedChannelStarred = !isChannelStarred;\r\n        setIsChannelStarred(updatedChannelStarred);\r\n\r\n        if (updatedChannelStarred) {\r\n            userRef\r\n                .child(`${currUser.uid}/starred`)\r\n                .update({\r\n                    [currChannel.id]: {\r\n                        name: currChannel.name,\r\n                        details: currChannel.details,\r\n                        createdBy: {\r\n                            name: currChannel.createdBy.name,\r\n                            avatar: currChannel.createdBy.avatar\r\n\r\n                        }\r\n                    }\r\n                })\r\n        } else {\r\n            userRef\r\n                .child(`${currUser.uid}/starred`)\r\n                .child(currChannel.id)\r\n                .remove(err => {\r\n                    if (err !== null) {\r\n                        console.log(err);\r\n                    }\r\n                })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    const getMessageRef = () => {\r\n        return isPrivateChannel ? privateMessageRef : messageRef\r\n    }\r\n\r\n\r\n    const countUniqueUsers = (messages) => {\r\n        const uniqueUsers = messages.reduce((acc, message) => {\r\n            if (!acc.includes(message.user.name)) {\r\n                acc.push(message.user.name)\r\n            }\r\n            return acc;\r\n        }, []);\r\n        const plural = uniqueUsers.length > 1 || uniqueUsers.length === 0;\r\n        setNumUniqueUsers(`${uniqueUsers.length} user${plural ? \"s\" : \"\"}`)\r\n    }\r\n\r\n    const countUserPosts = (messages) => {\r\n        let userPosts = messages.reduce((acc, message) => {\r\n            if (message.user.name in acc) {\r\n                acc[message.user.name].count += 1;\r\n            }\r\n            else {\r\n                acc[message.user.name] = {\r\n                    avatar: message.user.avatar,\r\n                    count: 1\r\n                }\r\n            }\r\n            return acc;\r\n        }, {})\r\n        dispatch(setUserPosts(userPosts))\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleSearchTerm = event => {\r\n        const search = event.target.value;\r\n        setSearchTearm(search)\r\n        setSearchLoading(true)\r\n\r\n        const channelMessage = [...messages];\r\n        const regex = new RegExp(search, 'gi');\r\n        const searchResult = channelMessage.reduce((acc, message) => {\r\n            if (\r\n                (message.content && message.content.match(regex)) || (message.user && message.user.name && message.user.name.match(regex))\r\n            ) {\r\n                acc.push(message)\r\n            }\r\n            return acc;\r\n        }, [])\r\n        setSearchResult(searchResult)\r\n        setTimeout(() => setSearchLoading(false), 700)\r\n    }\r\n\r\n\r\n\r\n\r\n    const displayMessage = (messages) => (\r\n        messages.length > 0 && messages.map(message => (\r\n            <MessageChat\r\n                key={message.timestamp}\r\n                message={message}\r\n                user={currUser}\r\n            />\r\n        ))\r\n\r\n    )\r\n\r\n    const displayChannelName = channel => {\r\n        return channel ? `${isPrivateChannel ? '@' : '#'}${channel.name}` : '';\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MessagesHeader\r\n                handleSearchTerm={handleSearchTerm}\r\n                channelName={displayChannelName(currChannel)}\r\n                numUniqueUsers={numUniqueUsers}\r\n                searchLoading={searchLoading}\r\n                isPrivateChannel={isPrivateChannel}\r\n                handleStar={handleStar}\r\n                isChannelStarred={isChannelStarred}\r\n                setIsChannelStarred={setIsChannelStarred}\r\n            />\r\n            <Segment>\r\n                <Comment.Group className=\"messages\">\r\n                    {(messageLoading ? (\r\n                        <React.Fragment>\r\n                            <Spinner />\r\n                        </React.Fragment>\r\n\r\n                    ) : null)}\r\n                    {searchTearm ? displayMessage(searchResult) : displayMessage(messages)}\r\n                    <DisplayTypingUsers\r\n                        currUser={currUser}\r\n                        currChannel={currChannel}\r\n                    />\r\n                    <div ref={messageEnd}></div>\r\n                </Comment.Group>\r\n            </Segment>\r\n            <MessageForm\r\n                isPrivateChannel={isPrivateChannel}\r\n                messageRef={messageRef}\r\n                channel={currChannel}\r\n                user={currUser}\r\n                getMessageRef={getMessageRef}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","D:\\website project\\fun chart\\src\\component\\sidepanel\\SidePanel.js",[],"D:\\website project\\fun chart\\src\\component\\metaPanel\\MetaPanel.js",[],"D:\\website project\\fun chart\\src\\action\\types.js",[],"D:\\website project\\fun chart\\src\\component\\sidepanel\\Channels.js",["233","234","235"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Form, Icon, Input, Label, Menu, Modal } from 'semantic-ui-react'\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentChannel, setPrivateChannel } from '../../action'\r\n\r\nimport firebase from '../../firebase'\r\nimport ChannelItemList from './ChannelItemList'\r\n\r\nconst Channels = ({ user, currChannelState }) => {\r\n    const [channels, setChannels] = useState([])\r\n    const [currChannel, setCurrChannel] = useState(null)\r\n    const [modal, setModal] = useState(false)\r\n    const [channelName, setChannelName] = useState(\"\")\r\n    const [channelDetails, setChannelDetails] = useState(\"\")\r\n    const [channelRef] = useState(firebase.database().ref('channels'))\r\n    const [messagesRef] = useState(firebase.database().ref('messages'))\r\n    const [firstLoad, setFirstLoad] = useState(true)\r\n    const [typingRef] = useState(firebase.database().ref('typing'))\r\n    const dispatch = useDispatch();\r\n    var prevChannel = currChannel;\r\n\r\n    useEffect(() => {\r\n        var channels = []\r\n\r\n        channelRef.on('child_added', snap => {\r\n            channels.push(snap.val())\r\n            setChannels(channels);\r\n        })\r\n    }, [channelRef])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            channelRef.off();\r\n            channels.forEach(channel => {\r\n                messagesRef.child(channel.id).off();\r\n            })\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const firstChannel = channels[0];\r\n        if (firstLoad && channels.length > 0) {\r\n            dispatch(setCurrentChannel(firstChannel))\r\n            setFirstLoad(false)\r\n            setCurrChannel(firstChannel)\r\n        }\r\n    }, [channels, firstLoad])\r\n\r\n\r\n\r\n\r\n    const displayChannels = () => {\r\n\r\n        return (\r\n            channels.length > 0 &&\r\n            channels.map((channel) => (\r\n                <ChannelItemList channel={channel} changeChannel={changeChannel} currChannel={currChannelState} key={channel.id} />\r\n            ))\r\n        );\r\n    }\r\n\r\n\r\n    const changeChannel = (channel) => {\r\n        dispatch(setCurrentChannel(channel));\r\n        dispatch(setPrivateChannel(false));\r\n        setCurrChannel(channel)\r\n        typingRef\r\n            .child(prevChannel.id)\r\n            .child(user.uid)\r\n            .remove()\r\n    }\r\n\r\n\r\n    const addChannel = () => {\r\n        const key = channelRef.push().key;\r\n        const newChannel = {\r\n            id: key,\r\n            name: channelName,\r\n            details: channelDetails,\r\n            createdBy: {\r\n                name: user.displayName,\r\n                avatar: user.photoURL\r\n            }\r\n        }\r\n        channelRef\r\n            .child(key)\r\n            .update(newChannel)\r\n            .then(() => {\r\n                setChannelName(\"\");\r\n                setChannelDetails(\"\");\r\n                setModal(false)\r\n                console.log(\"channel added\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n    const formSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (channelName && channelDetails) {\r\n            addChannel();\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"exchange\" />CHANNELS\r\n                </span>{\"   \"}\r\n                ({channels.length})<Icon name=\"add\" onClick={() => setModal(true)} />\r\n                </Menu.Item>\r\n                {displayChannels()}\r\n            </Menu.Menu>\r\n\r\n            {/* //add channel modal */}\r\n            <Modal basic\r\n                open={modal}\r\n                onClose={() => setModal(false)}\r\n            >\r\n                <Modal.Header>Add a Channel</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form onSubmit={(event) => formSubmit(event)}>\r\n                        <Form.Field>\r\n                            <Input\r\n                                fluid\r\n                                label=\"Name of Channel\"\r\n                                name=\"channelName\"\r\n                                onChange={(event) => setChannelName(event.target.value)}\r\n\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Input\r\n                                fluid\r\n                                label=\"About the Channel\"\r\n                                name=\"channelDetails\"\r\n                                onChange={(event) => setChannelDetails(event.target.value)}\r\n\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button color=\"green\" inverted onClick={(event) => formSubmit(event)}>\r\n                        <Icon name=\"checkmark\" /> Add\r\n                    </Button>\r\n                    <Button color=\"red\" inverted onClick={() => setModal(false)}>\r\n                        <Icon name=\"remove\" /> Cancel\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default Channels\r\n","D:\\website project\\fun chart\\src\\component\\sidepanel\\UserPanel.js",[],"D:\\website project\\fun chart\\src\\component\\message\\MessagesHeader.js",[],"D:\\website project\\fun chart\\src\\component\\message\\MessageForm.js",["236"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { Button, Input, Segment } from 'semantic-ui-react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport firebase from '../../firebase'\r\nimport FileModal from './FileModal'\r\nimport ProgressBar from './ProgressBar';\r\nimport { Picker, emojiIndex } from 'emoji-mart';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\nconst MessageForm = ({ messageRef, user, channel, isPrivateChannel, getMessageRef }) => {\r\n    const [message, setMessage] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const [errors, setErrors] = useState([])\r\n    const [modal, setModal] = useState(false)\r\n    const [uploadState, setUploadState] = useState(\"\")\r\n    const [uploadTask, setUploadTask] = useState(null)\r\n    const [storageRef] = useState(firebase.storage().ref())\r\n    const [typingRef] = useState(firebase.database().ref('typing'))\r\n    const [percentUploaded, setPercentUploaded] = useState(0)\r\n    const [emojiPicker, setEmojiPicker] = useState(false)\r\n\r\n    const messageInputRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setUploadTask(null)\r\n            typingRef.off()\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    const createMessage = (fileUrl = null) => {\r\n        const messageObj = {\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n                id: user.uid,\r\n                name: user.displayName,\r\n                avatar: user.photoURL\r\n            }\r\n        };\r\n        if (fileUrl !== null) {\r\n            messageObj['image'] = fileUrl;\r\n\r\n        } else {\r\n            messageObj['content'] = message;\r\n        }\r\n\r\n        return messageObj\r\n\r\n    }\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.ctrlKey && event.keyCode === 13) {\r\n            sentMessage();\r\n        }\r\n        if (message) {\r\n            typingRef\r\n                .child(channel.id)\r\n                .child(user.uid)\r\n                .set(user.displayName)\r\n        }\r\n        else {\r\n            typingRef\r\n                .child(channel.id)\r\n                .child(user.uid)\r\n                .remove()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const sentMessage = () => {\r\n        if (message) {\r\n            setLoading(true)\r\n            getMessageRef()\r\n                .child(channel.id)\r\n                .push()\r\n                .set(createMessage())\r\n                .then(() => {\r\n                    setLoading(false)\r\n                    setMessage(\"\")\r\n                    setErrors([])\r\n                    typingRef\r\n                        .child(channel.id)\r\n                        .child(user.uid)\r\n                        .remove()\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    setLoading(false)\r\n                    setErrors([err])\r\n                })\r\n        }\r\n        else {\r\n            var err = []\r\n            err.push(\"add a message\")\r\n            setErrors(err)\r\n        }\r\n    }\r\n\r\n    const getPath = () => {\r\n        if (isPrivateChannel) {\r\n            return `chat/private/${channel.id}`;\r\n        } else {\r\n            return 'chat/public';\r\n        }\r\n    }\r\n\r\n    const handleAddEmoji = (emoji) => {\r\n        const oldMessage = message;\r\n        const newMessage = colonToUnicode(`${oldMessage} ${emoji.colons}`);\r\n        setMessage(newMessage)\r\n        setEmojiPicker(false);\r\n        setTimeout(() => messageInputRef.current.focus(), 0);\r\n    }\r\n\r\n\r\n\r\n    const colonToUnicode = message => {\r\n        return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n            x = x.replace(/:/g, \"\");\r\n            let emoji = emojiIndex.emojis[x];\r\n            if (typeof emoji !== \"undefined\") {\r\n                let unicode = emoji.native;\r\n                if (typeof unicode !== \"undefined\") {\r\n                    return unicode;\r\n                }\r\n            }\r\n            x = \":\" + x + \":\";\r\n            return x;\r\n        });\r\n    };\r\n\r\n\r\n    const handleTogglePicker = () => {\r\n        var picker = !emojiPicker;\r\n        setEmojiPicker(picker)\r\n    }\r\n\r\n    const uploadFile = (file, metadata) => {\r\n        const pathToUpload = channel.id;\r\n        const ref = getMessageRef();\r\n        const filePath = `${getPath()}/${uuidv4()}.jpg`;\r\n        const uploadtemp = storageRef.child(filePath).put(file, metadata)\r\n        setUploadState(\"uploading\");\r\n        setUploadTask(uploadtemp);\r\n\r\n        uploadtemp.on('state__changed', snap => {\r\n            const percentageUpload = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n            setPercentUploaded(percentageUpload);\r\n        }, err => {\r\n            console.log(err);\r\n            setErrors(errs => [...errs, err]);\r\n            setUploadState('error');\r\n            setUploadTask(null)\r\n        });\r\n\r\n        uploadtemp.then(() => {\r\n            uploadtemp.snapshot.ref.getDownloadURL()\r\n                .then(downloadUrl => {\r\n                    console.log(downloadUrl);\r\n                    sentFileMessage(downloadUrl, ref, pathToUpload);\r\n                })\r\n                .catch(err => {\r\n                    console.log('get download url failed', err);\r\n                    setErrors(errs => [...errs, err]);\r\n                    setUploadState('error');\r\n                    setUploadTask(null)\r\n                    console.log(uploadTask);\r\n\r\n                });\r\n        });\r\n    }\r\n\r\n    const sentFileMessage = (downloadUrl, ref, pathToUpload) => {\r\n        ref.child(pathToUpload)\r\n            .push()\r\n            .set(createMessage(downloadUrl))\r\n            .then(() => {\r\n                setUploadState('done');\r\n                console.log('image upload done');\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setErrors(errs => [...errs, err])\r\n            })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Segment className=\"message__form\">\r\n                {emojiPicker && (\r\n                    <Picker\r\n                        set=\"apple\"\r\n                        className=\"emojipicker\"\r\n                        onSelect={handleAddEmoji}\r\n                        title=\"Pick your emoji\"\r\n                        emoji=\"point_up\"\r\n                    />\r\n                )}\r\n                <Input\r\n                    fluid\r\n                    name=\"message\"\r\n                    onChange={(event) => setMessage(event.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    style={{ marginBottom: '0.7em' }}\r\n                    ref={messageInputRef}\r\n                    label={\r\n                        <Button\r\n                            icon={emojiPicker ? 'close' : 'add'}\r\n                            content={emojiPicker ? 'Close' : null}\r\n                            onClick={() => handleTogglePicker()}\r\n                        />}\r\n                    labelPosition=\"left\"\r\n                    className={errors.length > 0 && errors.map(error => error.includes('message')) ? 'error' : ''}\r\n                    placeholder=\"write your message\"\r\n                    value={message}\r\n                />\r\n                <Button.Group icon widths={2}>\r\n                    <Button\r\n                        onClick={() => sentMessage()}\r\n                        disabled={loading}\r\n                        color=\"orange\"\r\n                        content=\"Add Replay\"\r\n                        labelPosition=\"left\"\r\n                        icon=\"edit\"\r\n                    />\r\n                    <Button\r\n                        disabled={uploadState === \"uploading\"}\r\n                        color=\"teal\"\r\n                        onClick={() => setModal(true)}\r\n                        content=\"Upload Media\"\r\n                        labelPosition=\"right\"\r\n                        icon=\"cloud upload\"\r\n                    />\r\n                </Button.Group>\r\n                <FileModal\r\n\r\n                    modal={modal}\r\n                    setModal={setModal}\r\n                    uploadFile={uploadFile}\r\n                />\r\n                <ProgressBar\r\n                    uploadState={uploadState}\r\n                    percentUploaded={percentUploaded}\r\n\r\n                />\r\n            </Segment>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MessageForm\r\n","D:\\website project\\fun chart\\src\\component\\message\\MessageChat.js",[],"D:\\website project\\fun chart\\src\\component\\message\\FileModal.js",[],["237","238"],"D:\\website project\\fun chart\\src\\component\\message\\ProgressBar.js",[],"D:\\website project\\fun chart\\src\\component\\sidepanel\\DirectMessages.js",["239","240"],"import React, { useState, useEffect } from 'react'\r\nimport firebase from '../../firebase'\r\nimport { Icon, Menu } from 'semantic-ui-react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentChannel, setPrivateChannel } from '../../action'\r\nconst DirectMessages = ({ user }) => {\r\n    const dispatch = useDispatch();\r\n    const [activeChannel, setActiveChannel] = useState(\"\")\r\n    const [users, setUsers] = useState([])\r\n    const [usersRef] = useState(firebase.database().ref('users'))\r\n    const [connectedRef] = useState(firebase.database().ref('.info/connected'))\r\n    const [presenceRef] = useState(firebase.database().ref('presence'))\r\n    useEffect(() => {\r\n        if (user) {\r\n            addListeners(user.uid)\r\n        }\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            usersRef.off()\r\n            presenceRef.off()\r\n            connectedRef.off()\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    const addListeners = (currUserId) => {\r\n        usersRef.on('child_added', snap => {\r\n            if (currUserId !== snap.key) {\r\n                let user = snap.val();\r\n                user['uid'] = snap.key;\r\n                user['status'] = 'offline';\r\n                setUsers(users => [...users, user]);\r\n            }\r\n        })\r\n\r\n        connectedRef.on('value', snap => {\r\n            if (snap.val() === true) {\r\n                const ref = presenceRef.child(currUserId);\r\n                ref.set(true);\r\n                ref.onDisconnect().remove(err => {\r\n                    if (err !== null) {\r\n                        console.error(err);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        presenceRef.on('child_added', snap => {\r\n            if (currUserId !== snap.key) {\r\n                console.log('setting online', JSON.stringify(users));\r\n                addStatusToUser(snap.key);\r\n            }\r\n        })\r\n        presenceRef.on('child_removed', snap => {\r\n            if (currUserId !== snap.key) {\r\n                console.log('setting offline', JSON.stringify(users));\r\n                addStatusToUser(snap.key, false);\r\n            }\r\n        })\r\n    }\r\n\r\n    const changeChannel = (user) => {\r\n        const channelId = getChannelId(user.uid);\r\n        const channelData = {\r\n            id: channelId,\r\n            name: user.name\r\n        };\r\n        dispatch(setCurrentChannel(channelData));\r\n        dispatch(setPrivateChannel(true));\r\n        setActiveChannel(user.uid);\r\n    }\r\n\r\n    const getChannelId = (userId) => {\r\n        const currentUserId = user.uid;\r\n        return userId < currentUserId ? `${userId}/${currentUserId}` : `${currentUserId}/${userId}`;\r\n    }\r\n\r\n\r\n    const addStatusToUser = (userId, connected = true) => {\r\n        setUsers(prevUsers => {\r\n            prevUsers.forEach(user => {\r\n                if (user.uid === userId) {\r\n                    user['status'] = `${connected ? 'online' : 'offline'}`\r\n                }\r\n            });\r\n            return [...prevUsers];\r\n        })\r\n\r\n\r\n\r\n    }\r\n    const isUserOnline = (user) => user.status === 'online';\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"mail\" />DIRECT MESSAGES\r\n                    </span>{' '}\r\n                     ({users.length})\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n            {users.map(user => {\r\n                return (\r\n                    <Menu.Item\r\n                        key={user.uid}\r\n                        active={user.uid === activeChannel}\r\n                        onClick={() => changeChannel(user)}\r\n                        style={{ opacity: 0.7, fontStyle: 'italic' }}\r\n                    >\r\n                        <Icon\r\n                            name=\"circle\"\r\n                            color={isUserOnline(user) ? 'green' : 'red'}\r\n\r\n                        />\r\n                  @{user.name}\r\n                    </Menu.Item>\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DirectMessages\r\n","D:\\website project\\fun chart\\src\\component\\sidepanel\\Starred.js",["241","242"],"import React, { useState, useEffect } from 'react'\r\nimport { Menu, Icon } from 'semantic-ui-react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setCurrentChannel, setPrivateChannel } from '../../action'\r\nimport firebase from '../../firebase'\r\n\r\nconst Starred = ({ user }) => {\r\n    const dispatch = useDispatch();\r\n    const [userRef] = useState(firebase.database().ref('users'))\r\n    const [starredChannels, setStarredChannels] = useState([])\r\n    const [activeChannel, setActiveChannel] = useState('')\r\n\r\n    useEffect(() => {\r\n\r\n        if (user) {\r\n            addListeners(user.uid)\r\n        }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            userRef.child(`${user.uid}/starred`).off();\r\n        }\r\n\r\n    }, [])\r\n\r\n    const addListeners = (id) => {\r\n        var channels = []\r\n        userRef\r\n            .child(id)\r\n            .child('starred')\r\n            .on('child_added', snap => {\r\n                const starredChannel = { id: snap.key, ...snap.val() };\r\n                channels.push(starredChannel);\r\n                setStarredChannels([...channels])\r\n            })\r\n\r\n        userRef\r\n            .child(id)\r\n            .child('starred')\r\n            .on('child_removed', snap => {\r\n                const channelToRemove = { id: snap.key, ...snap.val() };\r\n                const filterChannels = channels.filter(channel => {\r\n                    return channel.id !== channelToRemove.id;\r\n                })\r\n                channels = filterChannels\r\n                setStarredChannels(filterChannels)\r\n            })\r\n    }\r\n\r\n\r\n    const displayChannels = () => (\r\n        starredChannels.length > 0 &&\r\n        starredChannels.map(channel => (\r\n            <Menu.Item\r\n                key={channel.id}\r\n                onClick={() => changeChannel(channel)}\r\n                name={channel.name}\r\n                style={{ opacity: 0.7 }}\r\n                active={channel.id === activeChannel.id}\r\n            >\r\n                # {channel.name}\r\n            </Menu.Item>\r\n        ))\r\n    )\r\n\r\n    const changeChannel = (channel) => {\r\n        dispatch(setCurrentChannel(channel));\r\n        setActiveChannel(channel);\r\n        dispatch(setPrivateChannel(false));\r\n        // setChannel(channel)\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"star\" />Favourite's\r\n                </span>{\"   \"}\r\n                    ({starredChannels.length})\r\n                </Menu.Item>\r\n                {displayChannels()}\r\n            </Menu.Menu>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Starred\r\n","D:\\website project\\fun chart\\src\\component\\message\\Typing.js",[],"D:\\website project\\fun chart\\src\\component\\message\\Skeletion.js",[],"D:\\website project\\fun chart\\src\\component\\message\\DisplayTypingUsers.js",["243"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport firebase from '../../firebase'\r\n\r\nimport Typing from './Typing'\r\n\r\nconst DisplayTypingUsers = ({ currChannel, currUser }) => {\r\n    const [typingUsers, setTypingUsers] = useState([])\r\n    const [listeners, setListeners] = useState([])\r\n    const [typingRef] = useState(firebase.database().ref('typing'))\r\n    // const [connectRef] = useState(firebase.database().ref('.info/connected'))\r\n\r\n    useEffect(() => {\r\n        if (currChannel) {\r\n            addUserTypingListener(currChannel.id)\r\n        }\r\n\r\n        return () => removeListeners(listeners);\r\n    }, [currChannel])\r\n\r\n\r\n    const removeListeners = (listeners) => {\r\n        listeners.forEach(listener => {\r\n            listener.ref.child(listener.id).off(listener.event);\r\n        });\r\n        setTypingUsers([]);\r\n    }\r\n    const addToListeners = (id, ref, event) => {\r\n        const index = listeners.findIndex(listener => {\r\n            return listener.id === id && listener.ref === ref && listener.event === event;\r\n        })\r\n\r\n        if (index === -1) {\r\n            const newListener = { id, ref, event }\r\n            setListeners([...listeners, newListener])\r\n        }\r\n    }\r\n\r\n\r\n    const addUserTypingListener = (channelId) => {\r\n        if (currChannel && channelId !== null) {\r\n            let tempTypingUsers = [];\r\n            typingRef\r\n                .child(channelId).on('child_added', snap => {\r\n                    if (snap.key !== currUser.uid) {\r\n                        tempTypingUsers = tempTypingUsers.concat({\r\n                            id: snap.key,\r\n                            name: snap.val()\r\n                        })\r\n                        setTypingUsers([...tempTypingUsers]);\r\n                    }\r\n                })\r\n            addToListeners(channelId, typingRef, 'child_added');\r\n            typingRef\r\n                .child(channelId).on('child_removed', snap => {\r\n                    const index = tempTypingUsers.findIndex(user => user.id === snap.key);\r\n                    if (index !== -1) {\r\n                        tempTypingUsers = tempTypingUsers.filter(user => user.id !== snap.key);\r\n                        setTypingUsers([...tempTypingUsers])\r\n                    }\r\n\r\n                })\r\n            addToListeners(channelId, typingRef, 'child_removed');\r\n            // connectRef.on('value', snap => {\r\n            //     if (snap.val() === true) {\r\n            //         typingRef\r\n            //             .child(channelId)\r\n            //             .child(currUser.uid)\r\n            //             .onDisconnect()\r\n            //             .remove(err => {\r\n            //                 if (err !== null) {\r\n            //                     console.log(err);\r\n            //                 }\r\n            //             })\r\n            //     }\r\n            // })\r\n        }\r\n    }\r\n    return (\r\n        typingUsers.length > 0 && typingUsers.map(user => (\r\n            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.2em' }} key={user.id}>\r\n                <span className=\"user__typing\">{user.name}  typing</span>\r\n                <Typing />\r\n            </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default DisplayTypingUsers\r\n","D:\\website project\\fun chart\\src\\component\\sidepanel\\ChannelItemList.js",["244","245","246"],"import React, { useEffect, useState } from 'react'\r\nimport { Label, Menu } from 'semantic-ui-react'\r\n\r\n\r\nimport firebase from '../../firebase'\r\n\r\nconst ChannelItemList = ({ channel, changeChannel, currChannel }) => {\r\n    console.log('new render', channel.id);\r\n    const [messagesRef] = useState(firebase.database().ref('messages'))\r\n    const [notifications, setNotifications] = useState([])\r\n    const [activeChannel, setActiveChannel] = useState(false)\r\n\r\n    useEffect(() => {\r\n        channel && addNotificationListener(channel.id)\r\n        if (channel && currChannel && channel.id === currChannel.id) {\r\n            setActiveChannel(true)\r\n        }\r\n    }, [channel, currChannel])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            messagesRef.child(channel.id).off();\r\n        }\r\n    }, [])\r\n\r\n    const addNotificationListener = (channelId) => {\r\n        if (currChannel) {\r\n            messagesRef.child(channelId).on('value', snap => {\r\n                if (currChannel) {\r\n                    handleNotification(channelId, currChannel.id, snap);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleNotification = (channelId, currentChannelId, snap) => {\r\n        console.log('set notification from handle notification', channel.id);\r\n        setNotifications(tempNotifications => {\r\n            let lastTotal = 0;\r\n            let index = tempNotifications.findIndex(notification => notification.id === channelId);\r\n\r\n            if (index !== -1) {\r\n                if (channelId !== currentChannelId) {\r\n                    lastTotal = tempNotifications[index].total;\r\n\r\n                    if (snap.numChildren() - lastTotal > 0) {\r\n                        tempNotifications[index].count = snap.numChildren() - lastTotal;\r\n                    }\r\n                }\r\n                tempNotifications[index].lastKnownTotal = snap.numChildren();\r\n            } else {\r\n                tempNotifications.push({\r\n                    id: channelId,\r\n                    total: snap.numChildren(),\r\n                    lastKnownTotal: snap.numChildren(),\r\n                    count: 0\r\n                })\r\n            }\r\n            return [...tempNotifications];\r\n        });\r\n    }\r\n\r\n    const clearNotification = () => {\r\n        console.log('set notification from clear notification', channel.id);\r\n        setNotifications(prevNotifications => {\r\n            let index = prevNotifications.findIndex(notification => notification.id === currChannel.id);\r\n            let updateNotifications = [...prevNotifications];\r\n            if (index !== -1) {\r\n                updateNotifications[index].total = notifications[index].lastKnownTotal;\r\n                updateNotifications[index].count = 0;\r\n            }\r\n            console.log(updateNotifications);\r\n            return updateNotifications;\r\n        });\r\n\r\n    }\r\n\r\n\r\n    const getNotificationCount = (channel) => {\r\n        let count = 0;\r\n        console.log(notifications.map(notification => {\r\n            return (`${notification.count} ${notification.id} lastKnownTotal${notification.lastKnownTotal} total${notification.total}`)\r\n        }));\r\n        notifications.forEach(notification => {\r\n            if (notification.id !== channel.id) {\r\n                count = notification.count;\r\n            }\r\n        })\r\n\r\n        if (count > 0) return count;\r\n    }\r\n    const notificationCount = getNotificationCount(currChannel);\r\n    return (\r\n\r\n        <Menu.Item\r\n            key={channel.id}\r\n            onClick={() => { changeChannel(channel); clearNotification() }}\r\n            name={channel.name}\r\n            style={{ opacity: 0.7 }}\r\n            active={channel?.id === currChannel?.id}\r\n        >\r\n            {notificationCount && (\r\n                <Label color=\"red\">{notificationCount}</Label>\r\n            )}\r\n        # {channel.name}\r\n        </Menu.Item>\r\n    )\r\n}\r\n\r\nexport default ChannelItemList\r\n","D:\\website project\\Fire Chat\\src\\index.js",[],["247","248"],"D:\\website project\\Fire Chat\\src\\component\\app\\App.js",[],"D:\\website project\\Fire Chat\\src\\component\\Auth\\login\\Login.js",[],"D:\\website project\\Fire Chat\\src\\component\\spinner\\Spinner.js",[],"D:\\website project\\Fire Chat\\src\\component\\Auth\\register\\Register.js",[],"D:\\website project\\Fire Chat\\src\\action\\index.js",[],"D:\\website project\\Fire Chat\\src\\reducers\\index.js",[],"D:\\website project\\Fire Chat\\src\\component\\metaPanel\\MetaPanel.js",[],"D:\\website project\\Fire Chat\\src\\component\\Auth\\login\\loginForm\\LoginForm.js",[],"D:\\website project\\Fire Chat\\src\\component\\Auth\\register\\registerForm\\RegisterForm.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\sidePanel\\SidePanel.js",[],"D:\\website project\\Fire Chat\\src\\action\\types.js",[],"D:\\website project\\Fire Chat\\src\\firebase.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\DisplayTypingUsers.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\messageForm\\MessageForm.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\messageHeader\\MessagesHeader.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\messageChat\\MessageChat.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\userPanel\\UserPanel.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\starred\\Starred.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\channels\\Channels.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\directMessage\\DirectMessages.js",[],"D:\\website project\\Fire Chat\\src\\component\\colorPanel\\ColorPanel.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\Typing.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\ProgressBar.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\FileModal.js",[],"D:\\website project\\Fire Chat\\src\\component\\sidepanel\\channels\\channelItem\\ChannelItemList.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\message\\Message.js",[],"D:\\website project\\Fire Chat\\src\\component\\message\\InitialMessage\\InitialMessage.js",[],{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":38,"column":8,"nodeType":"255","endLine":38,"endColumn":42,"suggestions":"256"},{"ruleId":"253","severity":1,"message":"257","line":55,"column":8,"nodeType":"255","endLine":55,"endColumn":10,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":2,"column":37,"nodeType":"261","messageId":"262","endLine":2,"endColumn":42},{"ruleId":"253","severity":1,"message":"263","line":40,"column":8,"nodeType":"255","endLine":40,"endColumn":10,"suggestions":"264"},{"ruleId":"253","severity":1,"message":"265","line":50,"column":8,"nodeType":"255","endLine":50,"endColumn":29,"suggestions":"266"},{"ruleId":"253","severity":1,"message":"267","line":31,"column":8,"nodeType":"255","endLine":31,"endColumn":10,"suggestions":"268"},{"ruleId":"249","replacedBy":"269"},{"ruleId":"251","replacedBy":"270"},{"ruleId":"253","severity":1,"message":"271","line":17,"column":8,"nodeType":"255","endLine":17,"endColumn":14,"suggestions":"272"},{"ruleId":"253","severity":1,"message":"273","line":26,"column":8,"nodeType":"255","endLine":26,"endColumn":10,"suggestions":"274"},{"ruleId":"253","severity":1,"message":"271","line":18,"column":8,"nodeType":"255","endLine":18,"endColumn":14,"suggestions":"275"},{"ruleId":"253","severity":1,"message":"276","line":25,"column":8,"nodeType":"255","endLine":25,"endColumn":10,"suggestions":"277"},{"ruleId":"253","severity":1,"message":"278","line":19,"column":8,"nodeType":"255","endLine":19,"endColumn":21,"suggestions":"279"},{"ruleId":"259","severity":1,"message":"280","line":11,"column":12,"nodeType":"261","messageId":"262","endLine":11,"endColumn":25},{"ruleId":"253","severity":1,"message":"281","line":18,"column":8,"nodeType":"255","endLine":18,"endColumn":30,"suggestions":"282"},{"ruleId":"253","severity":1,"message":"283","line":24,"column":8,"nodeType":"255","endLine":24,"endColumn":10,"suggestions":"284"},{"ruleId":"249","replacedBy":"285"},{"ruleId":"251","replacedBy":"286"},"no-native-reassign",["287"],"no-negated-in-lhs",["288"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addUserStarsListener' and 'messageListener'. Either include them or remove the dependency array.","ArrayExpression",["289"],"React Hook useEffect has missing dependencies: 'connectRef' and 'listeners'. Either include them or remove the dependency array.",["290"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'channelRef', 'channels', and 'messagesRef'. Either include them or remove the dependency array.",["291"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["292"],"React Hook useEffect has a missing dependency: 'typingRef'. Either include it or remove the dependency array.",["293"],["287"],["288"],"React Hook useEffect has a missing dependency: 'addListeners'. Either include it or remove the dependency array.",["294"],"React Hook useEffect has missing dependencies: 'connectedRef', 'presenceRef', and 'usersRef'. Either include them or remove the dependency array.",["295"],["296"],"React Hook useEffect has missing dependencies: 'user.uid' and 'userRef'. Either include them or remove the dependency array.",["297"],"React Hook useEffect has missing dependencies: 'addUserTypingListener' and 'listeners'. Either include them or remove the dependency array.",["298"],"'activeChannel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addNotificationListener'. Either include it or remove the dependency array.",["299"],"React Hook useEffect has missing dependencies: 'channel.id' and 'messagesRef'. Either include them or remove the dependency array.",["300"],["287"],["288"],"no-global-assign","no-unsafe-negation",{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"311","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},"Update the dependencies array to be: [currUser, currChannel, listeners, messageListener, addUserStarsListener]",{"range":"324","text":"325"},"Update the dependencies array to be: [connectRef, listeners]",{"range":"326","text":"327"},"Update the dependencies array to be: [channelRef, channels, messagesRef]",{"range":"328","text":"329"},"Update the dependencies array to be: [channels, dispatch, firstLoad]",{"range":"330","text":"331"},"Update the dependencies array to be: [typingRef]",{"range":"332","text":"333"},"Update the dependencies array to be: [addListeners, user]",{"range":"334","text":"335"},"Update the dependencies array to be: [connectedRef, presenceRef, usersRef]",{"range":"336","text":"337"},{"range":"338","text":"335"},"Update the dependencies array to be: [user.uid, userRef]",{"range":"339","text":"340"},"Update the dependencies array to be: [addUserTypingListener, currChannel, listeners]",{"range":"341","text":"342"},"Update the dependencies array to be: [addNotificationListener, channel, currChannel]",{"range":"343","text":"344"},"Update the dependencies array to be: [channel.id, messagesRef]",{"range":"345","text":"346"},[1691,1725],"[currUser, currChannel, listeners, messageListener, addUserStarsListener]",[2029,2031],"[connectRef, listeners]",[1431,1433],"[channelRef, channels, messagesRef]",[1703,1724],"[channels, dispatch, firstLoad]",[1194,1196],"[typingRef]",[751,757],"[addListeners, user]",[921,923],"[connectedRef, presenceRef, usersRef]",[615,621],[750,752],"[user.uid, userRef]",[622,635],"[addUserTypingListener, currChannel, listeners]",[665,687],"[addNotificationListener, channel, currChannel]",[807,809],"[channel.id, messagesRef]"]